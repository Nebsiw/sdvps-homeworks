apiVersion: v1
kind: Namespace
metadata:
  name: redis-nginx

---

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: redis-nginx
  name: redis
  labels:
    name: redis
    app: redis
spec:
  selector:
    matchLabels:
      app: redis
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: master
        image: bitnami/redis:6.0.13
        env:
          - name: ALLOW_EMPTY_PASSWORD
            value: "yes"
        ports:
        - containerPort: 6379

---

apiVersion: v1
kind: Service
metadata:
  namespace: redis-nginx
  name: redis-svc
  labels:
    name: redis
    app: redis
spec:
  type: NodePort
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
    nodePort: 30379
  selector:
    app: redis

---

apiVersion: v1
kind: ConfigMap
metadata:
  namespace: redis-nginx
  name: nginx-conf
  labels:
    name: nginx
    app: nginx
data:
  nginx.conf: |
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        root /var/www/html;
        index index.html index.htm;
        server_name _;
        location / {
          add_header Content-Type text/plain;
          return 200 'Hello from k8s';
          }
          }

---

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: redis-nginx
  name: nginx
  labels:
    name: nginx
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-conf
          mountPath: /etc/nginx/conf.d
          readOnly: true
      volumes:
        - name: nginx-conf
          configMap:
            name: nginx-conf
            items:
              - key: nginx.conf
                path: nginx.conf

---

apiVersion: v1
kind: Service
metadata:
  namespace: redis-nginx
  name: nginx-service
  labels:
    name: nginx
    app: nginx
spec:
  type: NodePort
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
    nodePort: 30080
  selector:
    app: nginx


---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  namespace: redis-nginx
  labels:
    name: nginx
    app: nginx
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: test.ru
      http:
        paths:
          - path: /test
            pathType: Prefix
            backend:
              service:
                name: nginx-service
                port:
                  number: 80
